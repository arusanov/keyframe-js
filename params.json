{
  "name": "Keyframe-js",
  "tagline": "",
  "body": "# Keyframe\r\nKeyframe is tiny JS library which exposes helper methods for creating css3 animations and transitions.\r\nThe goal is to ease the creation of keyframes in cases where a property's value need to be set at runtime.\r\nIn addition, Keyframe can determine whether a given css property need to have a vendor prefix,\r\ntaking away some cross-browser dependent code.\r\n\r\n## Usage\r\n\r\nCreating keyframe:\r\n```\r\n//Create a keyframe (can be used later)\r\nvar keyframes = Keyframe.keyframe({\r\n    from: {\r\n      top: 100,\r\n      left: 100,\r\n      background: 'yellow'\r\n    },\r\n    50: {\r\n      top: 200,\r\n      left: 200,\r\n      background: 'green',\r\n      transform: 'scale(0.5,0.5)'\r\n    },\r\n    to: {\r\n      top: 300,\r\n      left: 300,\r\n      background: 'blue',\r\n      transform: 'scale(1.5,1.5)'\r\n    }\r\n    })\r\n```\r\n\r\nAnimating element:\r\n```\r\n/*\r\n    animate takes 2 parameters:\r\n        1. DOM element to animate\r\n        2. animation settings like in css but without 'animation' prefix\r\n           (duration, delay, iterationCount, direction, timingFunction)\r\n    it returns animation object with start() method\r\n*/\r\nvar animation = keyframes.animate(document.getElementById('element'), {\r\n    duration: 100,\r\n    iterationCount: 3\r\n  });\r\n\r\n/*\r\n  start an animation by calling 'start'.\r\n  It accepts 3 callback parameters.\r\n      (endCallback, startCallback, iterationCallback)\r\n  it returns animation object with 3 methods for animation flow control\r\n*/\r\nvar animationControls = animation.start();\r\n\r\n/* Animation control can pause, resume and stop running animation */\r\nanimationControls.pause();\r\nanimationControls.resume();\r\nanimationControls.stop();\r\n```\r\n\r\nTransitions:\r\n```\r\n/*\r\n    transition takes 2 parameters:\r\n        1. DOM element to animate\r\n        2. transition settings like in css but without 'transition' prefix\r\n           (duration, delay, timingFunction)\r\n    it returns transition object chain\r\n*/\r\nvar transition = Keyframe.transition(node,\r\n  {\r\n    duration: 100\r\n  })\r\n  .to({\r\n    left: 100,\r\n    top: 100,\r\n    width: 200,\r\n    height: 200,\r\n    background: 'red'\r\n  },function onend() {\r\n    //Called when step ended\r\n  }, function oncancel() {\r\n    //Called when step canceled\r\n  })\r\n  .then({ //Starts transition when previous completed\r\n      left: 100,\r\n      top: 100,\r\n      width: 200,\r\n      height: 200,\r\n      background: 'red'\r\n    },function onend() {\r\n      //Called when step ended\r\n    }, function oncancel() {\r\n      //Called when step canceled\r\n    });\r\n```",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}